import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.util.*; 

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.*;
import java.io.*;
import java.util.*;
import java.text.*;

public class words {
	private Set<String>dic = new HashSet<String>(100000000);
	private Set<String>dicFinal = new HashSet<String>(500);//all the words found
	private Set<String> UserDicFinal = new HashSet<String>(500);//all the words found
	private Set<String> checked = new HashSet<String>(10000);//all words that have already been checked go here
	private int count=0;
	private int UserCount=0;
	private ArrayList <String> TempDic = new ArrayList<String>();
	private ArrayList <String> TempDic1 = new ArrayList<String>();
	
	public void print () throws IOException{
		 Iterator<String> it = dic.iterator();   
		 while(it.hasNext())
	        {
	         String value =(String)it.next();
	         System.out.println(value);  
	      }
	}
	public static void main (String[] args)throws IOException{
		words test = new words();
		test.dictionary();
		//String word="apple";
		//test.Check(word);
		//test.Check(word);
		//System.out.print(test.robotPaths(4));
		System.out.print(test.test("chesf"));
		//System.out.print(test.CheckTest("aardaksk"));
		//System.out.print(test.CheckTest("hello"));
		//System.out.print(test.CheckTest("help"));
		//System.out.print(test.CheckTest("q"));
	}
	public boolean test (String word) throws IOException{
		boolean isValid=true;
		Iterator it=dic.iterator();
		while(it.hasNext())
        {
            String value =(String)it.next();
            if(word.length()<=value.length()&&value.substring(0, word.length()).equalsIgnoreCase(word.substring(0, word.length()))){
				isValid=true;
				break;
			}
			else 
				isValid=false;
        }
		return isValid;
	}
	public int Score(String input) throws IOException{
		int count=0;
		int y=0;
		while(y<input.length()){
			if (input.charAt(y)=='d'||input.charAt(y)=='g')
				count+=2;
			else if (input.charAt(y)=='m')
				count+=3;
			else if (input.charAt(y)=='b'||input.charAt(y)=='c'||input.charAt(y)=='f'||input.charAt(y)=='h'||input.charAt(y)=='p'||input.charAt(y)=='v'||input.charAt(y)=='w'||input.charAt(y)=='y')
				count+=4;
			else if (input.charAt(y)=='k')
				count+=5;
			else if (input.charAt(y)=='q'||input.charAt(y)=='x'||input.charAt(y)=='z')
				count+=10;
			else
				count+=1;
			y++;
		}
		return count;
	}
	public void dictionary(){//reads/intializes arraylist dic from a file
		File data = new File("dictionaryForJava.txt");
		Scanner scanner=null;
		try {
			scanner = new Scanner(data);
			while (scanner.hasNextLine()) {
				dic.add(scanner.nextLine());
			}
		} catch (FileNotFoundException fnfe) {}
		if(scanner!=null)scanner.close(); // need if if file missing
		//GreaterThan16 ();
	}
	public void GreaterThan16 (){//gets rid of all words greater than 16 letters
		int x=0;
		while(x<dic.size()){
			if(dic.get(x).length()>16){
				dic.remove(x);
				x++;
			}
			x++;
		}
	}
	public void specificLengthsOfWords(int length){
		for (int i=0;i<getDicFinal().size();i++){
			if(TempDic1.get(i).length()==length)
				System.out.println(TempDic1.get(i));
		}
	}
	public boolean CheckTest (String word)throws IOException{//if its impossible to create a word with the combination of letters then it returns false, 
		String backw=reverse(word);
		boolean isValid = true;		
		if (word.length()<=1){}
		else if (checked.contains(word)&&checked.contains(backw)){}
		else{
			boolean isWord=true;
			if(checked.contains(word)){}
			else if(dic.contains(word)){
				setCount(getCount()+1);
				//System.out.println(word);
				dicFinal.add(word+" "+Score(word));
				//dicFinal.add(word);
				dic.remove(word);
				//Score(word);
				TempDic1.add(word);
			}
			else
				isWord=false;
			if(checked.contains(backw)){}
			else if (dic.contains(backw)){
				setCount(getCount()+1);
				//System.out.println(backw);
				dicFinal.add(word+" "+Score(backw));
				//dicFinal.add(backw);
				dic.remove(word);
				//Score(word);
				TempDic1.add(word);
			}
			if(isWord==false){
				for(int i=0;i<dic.size();i++){
					if(word.length()<=dic.get(i).length()&&dic.get(i).substring(0, word.length()).equalsIgnoreCase(word.substring(0, word.length()))){
						isValid=true;
						i=dic.size();
					}
					else 
						isValid=false;
				}
			}
		}
		checked.add(word);
		checked.add(backw);
		return isValid;
	}
	public boolean CheckTest (String word, int stop)throws IOException{//if its impossible to create a word with the combination of letters then it returns false, 
		String backw=reverse(word);
		boolean yes = true;								//if you can spell a word it is true, this also checks if its a word and then removes it from the dictionary if it is
		if (word.length()<stop){
			yes=true;
		}
		/*else if (word.length()>stop){
			yes=false;
		}*/
		/*else*/ if (checked.contains(word)==true){
			yes=true;
		}
		else {
			if(dic.contains(word)){
				setCount(getCount()+1);
				//System.out.println(word);
				//System.out.print(word+Score(word));
				//dicFinal.add(word+" "+Score(word));
				dicFinal.add(word);
				//Score(word);
				dic.remove(word);
			}
			else if (dic.contains(backw)){
				setCount(getCount()+1);
				//System.out.println(backw);
				//System.out.print(word+Score(word));
				//dicFinal.add(word+" "+Score(word));
				dicFinal.add(backw);
				//Score(word);
				dic.remove(backw);
			}
			else{
				for(int i=0;i<dic.size();i++){
					if(word.length()<=dic.get(i).length()&&dic.get(i).substring(0, word.length()).equalsIgnoreCase(word)){
						yes=true;
						i=dic.size();
					}
					else 
						yes=false;
				}
			}
		}
		checked.add(word);
		checked.add(backw);
		return yes;
	}
	public boolean CheckGame (String word)throws IOException{
		if(dicFinal.contains(word)){
			setUserCount(getUserCount()+1);
			return true;
		}
		else
			return false;
	}
	public boolean Check (String word)throws IOException{//if its impossible to create a word with the combination of letters then it returns false, 
		String backw=reverse(word);
		boolean yes = true;								//if you can spell a word it is true, this also checks if its a word and then removes it from the dictionary if it is
		if (word.length()<=1){
			yes=true;
		}
		else if (checked.contains(word)==true){
			yes=true;
		}
		else {
			String start=word.substring(0, word.length());
			//System.out.print(TempDic);
			int Start=-1;
			int end=-1;
			for(int i=0;i<dic.size();i++){
				if(word.length()<=dic.get(i).length()&&dic.get(i).substring(0, word.length()).equalsIgnoreCase(start)){
					Start=dic.indexOf(dic.get(i));
					i=dic.size();
				}
			}
			for(int i=0;i<dic.size();i++){
				if(word.length()<=dic.get(i).length()&&dic.get(i).substring(0, word.length()).equalsIgnoreCase(start)){
					end=dic.lastIndexOf(dic.get(i));
				}
			}
			if(Start==-1&&end==-1)
				yes=false;
			else{	
				if (end==-1&&Start!=-1){
					TempDic=deepSubList(dic,Start,Start+1);
				}
				else{
					TempDic=deepSubList(dic,Start,end);
				}
				if(TempDic.contains(word)){
					setCount(getCount()+1);
					//System.out.println(word);
					//System.out.print(word+Score(word));
					//dicFinal.add(word+" "+Score(word));
					dicFinal.add(word);
					//Score(word);
					dic.remove(word);
				}
				else if (TempDic.contains(backw)){
					setCount(getCount()+1);
					//System.out.println(word);
					//System.out.print(word+Score(word));
					//dicFinal.add(word+" "+Score(word));
					dicFinal.add(backw);
					//Score(word);
					dic.remove(backw);
				}
				else{
					for(int i=0;i<TempDic.size();i++){
						if(TempDic.get(i).substring(0, word.length()).equalsIgnoreCase(start)&&word.length()>1){
							yes=true;
							i=TempDic.size();
						}
						else 
							yes=false;
					}
				}
			}
		}
		checked.add(word);
		checked.add(backw);
		return yes;
	}
	public String reverse(String input) throws IOException{
		String reverse="";
		for (int i=input.length()-1;i>=0;i--){
			reverse=reverse+""+input.charAt(i);
		}
		return reverse;
	}
	public String[][] deepCopyString(String[][] input)throws IOException {//does what the name says
		if (input == null)
			return null;
		String[][] result = new String[input.length][];
		for (int r = 0; r < input.length; r++) {
			result[r] = input[r].clone();
		}
		return result;
	}
	public boolean[][] deepCopyBoolean(boolean[][] input)throws IOException {//does what the name says
		if (input == null)
			return null;
		boolean[][] result = new boolean[input.length][];
		for (int r = 0; r < input.length; r++) {
			result[r] = input[r].clone();
		}
		return result;
	}
	public ArrayList<String> deepSubList(ArrayList<String> input, int start, int end) throws IOException{//does what the name says
		if (input == null)
			return null;
		ArrayList<String> result = new ArrayList<String>();
		for (int r = start; r <= end; r++) {
			result.add(input.get(r));
		}
		return result;
	}	
	public void getPaths(int x, int y,String word, boolean tracker[][],char MyLetteres[][],boolean isValid)throws IOException{
		if(word.length()>1){
			isValid=CheckTest(word);
		}
		if(isValid==false){
			return;
		}
		tracker[x][y]=true;//makes sure that the checkers never goes back over starting letter
		if(x+1<MyLetteres.length&&tracker[x+1][y]==false){//up{
			//System.out.print("1 ("+(x+1)+","+y+"), ");//for debugging purposes
			getPaths(x+1, y,word+MyLetteres[x+1][y], tracker,MyLetteres,true);//recursive part
		}
		if(x-1>=0&&tracker[x-1][y]==false){//down
			//System.out.print("2 ("+(x-1)+","+y+"), ");
			getPaths(x-1, y ,word+MyLetteres[x-1][y], tracker,MyLetteres,true);
		}
		if(y+1<MyLetteres.length&&tracker[x][y+1]==false){//right
			//System.out.print("3 ("+x+","+(y+1)+"), ");
			getPaths(x , y+1,word+MyLetteres[x][y+1], tracker,MyLetteres,true);
		}
		if(y-1>=0&&tracker[x][y-1]==false){//left
			//System.out.print("4 ("+x+","+(y-1)+"), ");
			getPaths(x , y-1,word+MyLetteres[x][y-1], tracker,MyLetteres,true);
		}
		if(x+1<MyLetteres.length&&y+1<MyLetteres.length&&tracker[x+1][y+1]==false){//right, up
			//System.out.print("5 ("+(x+1)+","+(y+1)+"), ");
			getPaths(x+1, y+1,word+MyLetteres[x+1][y+1], tracker,MyLetteres,true);
		}
		if(x-1>=0&&y-1>=0&&tracker[x-1][y-1]==false){//down, left
			//System.out.print("6 ("+(x-1)+","+(y-1)+"), ");
			getPaths(x-1, y-1,word+MyLetteres[x-1][y-1], tracker,MyLetteres,true);
		}
		if(x-1>=0&&y+1<MyLetteres.length&&tracker[x-1][y+1]==false){//down, right
			//System.out.print("7 ("+(x-1)+","+(y+1)+"), ");
			getPaths(x-1, y+1, word+MyLetteres[x-1][y+1],tracker,MyLetteres,true);
		}
		if(x+1<MyLetteres.length&&y-1>=0&&tracker[x+1][y-1]==false){//up, left
			//System.out.print("8 ("+(x+1)+","+(y-1)+"), ");
			getPaths(x+1 , y-1, word+MyLetteres[x+1][y-1],tracker,MyLetteres,true);
		}

		tracker[x][y]=false;
	}	
	public void Permext (int x,int x1,String start,String[] word,boolean tracker[][],boolean MyLetteres1[][],boolean checker)throws IOException{
		if(start.length()>1){
			//checker=Check(start);
			System.out.print(start+" ");
		}
		//if(start.length()==word.length){
		//return;
		//}
		if( checker==false){
			return;
		}
		tracker[x][0]=true;//makes sure that the checkers never goes back over starting letter
		if(x+1<word.length){
			if(/*x+1<word.length&&*/tracker[x+1][0]==false)
				Permext(x+1,x1,start+word[x+1],word, tracker,MyLetteres1,true);
			else if(/*x+1<word.length&&*/tracker[x+1][0]==true)
				x++;
		}
		if(x-1>=0){
			if(/*x-1>=0&&*/tracker[x-1][0]==false)
				Permext(x-1,x1,start+word[x-1],word, tracker,MyLetteres1,true);
			else if(/*x-1>=0&&*/tracker[x-1][0]==true)
				x--;
		}
		tracker[x][0]=false;
		x=x1;
	}
	public void permutation(String prefix, String str,boolean checker, int length)throws IOException {
		int n = str.length();
		if (n>=0) checker=CheckTest(prefix,length);
		if (n==0||checker==false) {}
		else {
			for (int i = 0; i < n; i++)
				permutation(prefix + str.charAt(i), str.substring(0, i) + str.substring(i+1, n),true,length);
		}

	}
	public Set<String> getDic() {
		return dic;
	}
	public void setDic(Set<String> dic) {
		this.dic = dic;
	}
	public Set<String> getDicFinal() {
		return dicFinal;
	}
	public void setDicFinal(Set<String> dicFinal) {
		this.dicFinal = dicFinal;
	}
	public Set<String> getUserDicFinal() {
		return UserDicFinal;
	}
	public void setUserDicFinal(Set<String> userDicFinal) {
		UserDicFinal = userDicFinal;
	}
	public Set<String> getChecked() {
		return checked;
	}
	public void setChecked(Set<String> checked) {
		this.checked = checked;
	}
	public int getCount() {
		return count;
	}
	public void setCount(int count) {
		this.count = count;
	}
	public int getUserCount() {
		return UserCount;
	}
	public void setUserCount(int userCount) {
		UserCount = userCount;
	}
	public ArrayList<String> getTempDic() {
		return TempDic;
	}
	public void setTempDic(ArrayList<String> tempDic) {
		TempDic = tempDic;
	}
	public ArrayList<String> getTempDic1() {
		return TempDic1;
	}
	public void setTempDic1(ArrayList<String> tempDic1) {
		TempDic1 = tempDic1;
	}

}
